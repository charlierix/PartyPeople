<Window x:Class="Game.Bepu.Testers.BepuTester"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Game.Bepu.Testers"
        mc:Ignorable="d"
        Title="BepuTester" ResizeMode="CanResizeWithGrip" Width="900" Height="800" Closed="Window_Closed">
    <Window.Resources>
        <Style x:Key="expanderStackPanel" TargetType="StackPanel">
            <Setter Property="Margin" Value="6"/>
        </Style>

        <DataTemplate x:Key="expanderHeader">
            <TextBlock Text="{Binding}" FontSize="15" Foreground="#3E453A"/>
        </DataTemplate>
        <Style TargetType="Expander">
            <Setter Property="HeaderTemplate" Value="{StaticResource expanderHeader}"/>
            <!--<Setter Property="ContentTemplate" Value="{StaticResource expanderContent}"/>-->
            <Setter Property="Margin" Value="2,3"/>
        </Style>

        <Style x:Key="radioToggle" TargetType="RadioButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="FontSize" Value="9"/>
        </Style>

        <Style TargetType="Button">
            <Setter Property="Margin" Value="0,2"/>
        </Style>

        <Style TargetType="RadioButton">
            <Setter Property="Margin" Value="0,2"/>
        </Style>

        <Style TargetType="CheckBox">
            <Setter Property="Margin" Value="0,2"/>
        </Style>

        <BooleanToVisibilityConverter x:Key="boolToVis" />
    </Window.Resources>

    <Grid Background="#F1F0EB">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" Margin="6,6,0,6">
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="4"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>

            <ScrollViewer Grid.Row="0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                <StackPanel>
                    <Expander Header="Add Simple" IsExpanded="True">
                        <StackPanel Style="{StaticResource expanderStackPanel}">

                            <TextBox x:Name="txtSimple_Count" Text="1"/>

                            <CheckBox x:Name="chkSimple_RandomSize" Content="random size" Margin="0,8,0,2"/>
                            <!--<CheckBox Content="static"/>-->

                            <Button Content="Sphere" Margin="0,8,0,2" Click="Sphere_Click"/>
                            <Button Content="Box" Click="Box_Click"/>

                        </StackPanel>
                    </Expander>

                    <Expander Visibility="Collapsed" Header="Static Plates">
                        <StackPanel Style="{StaticResource expanderStackPanel}">

                            <!-- Options to show/hide plates to help catch objects -->
                            <!-- When combined with a constant acceleration field, you could have a falling sand scenario -->

                        </StackPanel>
                    </Expander>

                    <Expander Header="Set Velocities">
                        <StackPanel Style="{StaticResource expanderStackPanel}" RadioButton.Checked="RadioVelocity_Checked" RadioButton.Unchecked="RadioVelocity_Checked">

                            <RadioButton IsChecked="True" x:Name="radVel_RandomEach" Content="Random (each)" ToolTip="Each item will go a random direction"/>
                            <RadioButton x:Name="radVel_RandomSame" Content="Random (same)" ToolTip="A random direction will be determined, then all items will get that same velocity"/>
                            <RadioButton x:Name="radVel_Center" Content="Toward/Away Center"/>
                            <RadioButton x:Name="radVel_X" Content="X"/>
                            <RadioButton x:Name="radVel_Y" Content="Y"/>
                            <RadioButton x:Name="radVel_Z" Content="Z"/>
                            <CheckBox Visibility="Collapsed" IsChecked="True" x:Name="chkVel_Positive" />

                            <Label Content="Speed"/>
                            <Slider Name="trkVel_Speed" Minimum="0" Maximum="100" Value="15"/>

                            <Button Content="Translate" Margin="0,8,0,2" Click="SetVelocity_Translate_Click"/>
                            <Button Content="Rotate" Click="SetVelocity_Rotate_Click"/>
                            <Button Content="Translate/Rotate" Click="SetVelocity_TranslateRotate_Click"/>
                            <Button Content="Stop All" Click="SetVelocity_StopAll_Click"/>

                            <UniformGrid Rows="1" Margin="0,8,0,0">
                                <RadioButton x:Name="radVel_Add" Content="Add" IsChecked="True" Style="{StaticResource radioToggle}" Margin="2"/>
                                <RadioButton x:Name="radVel_Overwrite" Content="Overwrite" Style="{StaticResource radioToggle}" Margin="2"/>
                            </UniformGrid>

                        </StackPanel>
                    </Expander>

                    <Expander Header="Vector Fields">
                        <StackPanel Style="{StaticResource expanderStackPanel}" RadioButton.Checked="RadioField_Checked" RadioButton.Unchecked="RadioField_Checked">

                            <CheckBox x:Name="chkField_Inward" Content="Inward"/>
                            <CheckBox x:Name="chkField_Swirl" Content="Swirl"/>
                            <CheckBox x:Name="chkField_ZPlane" Content="Toward Z=0 plane" ToolTip="z plane! z plane!"/>
                            <CheckBox IsChecked="False" x:Name="chkField_OuterShell" Content="Outer Shell"/>
                            <Grid Visibility="{Binding Path=IsChecked, ElementName=chkField_OuterShell, Converter={StaticResource boolToVis}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="2"/>
                                    <ColumnDefinition Width="1*"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Grid.Column="0" Text="radius"/>
                                <Slider Grid.Column="2" x:Name="trkField_OuterRadius" Minimum="20" Maximum="120" Value="60"/>
                            </Grid>

                            <CheckBox Visibility="Collapsed" x:Name="chkField_Jetstreams" Content="Drawn Jetstreams"/>
                            <Button Visibility="Collapsed" Content="clear streams"/>

                            <Label Content="Strength"/>
                            <Slider Name="trkField_Strength" Minimum="0" Maximum="100" Value="15" ValueChanged="trkField_Strength_ValueChanged"/>

                            <UniformGrid Rows="1" Margin="0,8,0,0">
                                <RadioButton x:Name="radField_Force" Content="Force" Style="{StaticResource radioToggle}" Margin="2"/>
                                <RadioButton x:Name="radField_Acceleration" Content="Acceleration" IsChecked="True" Style="{StaticResource radioToggle}" Margin="2"/>
                            </UniformGrid>

                        </StackPanel>
                    </Expander>

                    <Expander Header="Drag">
                        <StackPanel Style="{StaticResource expanderStackPanel}" CheckBox.Checked="chkDrag_Checked" CheckBox.Unchecked="chkDrag_Checked" Slider.ValueChanged="trkDrag_ValueChanged">
                            <CheckBox x:Name="chkDrag_Linear" Content="Linear"/>
                            <Slider x:Name="trkDrag_Linear" Minimum="0" Maximum="100" Value="15"/>

                            <CheckBox x:Name="chkDrag_Angular" Content="Angular" Margin="0,8,0,0"/>
                            <Slider x:Name="trkDrag_Angular" Minimum="0" Maximum="100" Value="15"/>
                        </StackPanel>
                    </Expander>

                    <Expander Header="Body/Body Forces">
                        <StackPanel Style="{StaticResource expanderStackPanel}" RadioButton.Checked="RadioBodyBody_Checked" RadioButton.Unchecked="RadioBodyBody_Checked">

                            <RadioButton IsChecked="True" x:Name="radBodyBody_None" Content="None"/>
                            <RadioButton x:Name="radBodyBody_Constant" Content="Constant" ToolTip="F = K"/>
                            <RadioButton x:Name="radBodyBody_Spring" Content="Spring" ToolTip="F = K * Dist"/>
                            <RadioButton x:Name="radBodyBody_Gravity" Content="Gravity" ToolTip="F = K * (M * M) / Dist^2"/>

                            <Label Content="Strength"/>
                            <Slider x:Name="trkBodyBody_Strength" Minimum="0" Maximum="100" Value="15" ValueChanged="trkBodyBody_Strength_ValueChanged"/>

                            <UniformGrid Rows="1" Margin="0,8,0,0">
                                <RadioButton IsChecked="True" x:Name="radBodyBody_Toward" Content="Toward" Style="{StaticResource radioToggle}" Margin="2"/>
                                <RadioButton x:Name="radBodyBody_Away" Content="Away" Style="{StaticResource radioToggle}" Margin="2"/>
                            </UniformGrid>

                        </StackPanel>
                    </Expander>

                    <Expander Header="Swarm">
                        <StackPanel Style="{StaticResource expanderStackPanel}">

                            <CheckBox x:Name="chkSwarm" Content="Enable Swarm" Checked="chkSwarm_Checked" Unchecked="chkSwarm_Checked"/>

                            <Label Content="Strength"/>
                            <Slider x:Name="trkSwarm_Strength" Minimum="0" Maximum="100" Value="15" ValueChanged="trkSwarm_Strength_ValueChanged"/>

                            <!-- TODO: Swarm (give each body simple swarm behaviors.  consider color when looking for attract/oppose neighbors) -->

                        </StackPanel>
                    </Expander>

                    <!-- TODO: Add Joined Bodies -->

                    <!-- TODO: On left click: (see tower wrecker) -->
                    <!-- fire slug -->
                    <!-- apply force (explode, implode, in, out, swirl || around point | along line ) | see tower wrecker -->
                    <!-- remove ( line | radius ) -->
                    <!-- grab (radius) -->
                    <!-- toggle static/dynamic -->
                    <!-- convert to attractor/repulsor/neutral -->
                    <!-- melt touching bodies into a blob (sintering) | shatter large body -->

                </StackPanel>
            </ScrollViewer>

            <UniformGrid Grid.Row="2" Rows="1">
                <UniformGrid.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Margin" Value="2"/>
                    </Style>
                </UniformGrid.Resources>

                <!--<Button Content="Start"/>-->
                <Button Content="Clear" Click="Clear_Click"/>
            </UniformGrid>
        </Grid>

        <!-- Viewport -->
        <Border Grid.Column="1" Name="grdViewPort" Background="#F7F7F5" BorderThickness="1" BorderBrush="#18000000" CornerRadius="3" Margin="9">
            <Border.Effect>
                <DropShadowEffect Color="#BECCB4" BlurRadius="14" Opacity=".2" Direction="0" ShadowDepth="0" />
            </Border.Effect>

            <Viewport3D Name="_viewport" IsHitTestVisible="False">
                <!-- Camera -->
                <Viewport3D.Camera>
                    <PerspectiveCamera x:Name="_camera" Position="0,0,60" LookDirection="0,0,-1" UpDirection="0,1,0" FieldOfView="45"/>
                </Viewport3D.Camera>
                <!-- Lights -->
                <ModelVisual3D>
                    <ModelVisual3D.Content>
                        <Model3DGroup>
                            <AmbientLight Color="DimGray" />
                            <DirectionalLight Color="White" Direction="1,-1,-1" />
                            <DirectionalLight Color="#A0A0A0" Direction="-1,1,1" />
                        </Model3DGroup>
                    </ModelVisual3D.Content>
                </ModelVisual3D>
            </Viewport3D>
        </Border>
    </Grid>
</Window>
